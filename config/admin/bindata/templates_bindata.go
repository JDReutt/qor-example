// +build bindata
// Code generated by go-bindata.
// sources:
// app/views/home_index.tmpl
// app/views/product_show.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appViewsHome_indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xc1\x6e\x83\x30\x0c\x86\xef\x7b\x0a\x2b\x3b\x97\x68\x9b\xb4\x13\xed\x43\xec\x05\xa2\x14\x0c\x44\x82\x04\xc5\x66\x3d\x44\x7d\xf7\x59\x2b\xa3\xc0\x4a\x55\xf5\x44\x64\xfb\x47\x9f\xbf\x24\xa5\x93\xe3\x06\xb2\x2f\xa4\xa1\x65\x38\x9f\x5f\x00\x52\xca\x38\xf4\xe6\x68\xbd\xc7\x28\x15\x29\xe5\xa5\xfb\x86\xa2\xb5\x44\x7b\x55\x04\xcf\xd6\x49\x4b\x1d\xa4\xb3\xec\xc5\x70\x1a\xab\xeb\x4c\x3b\x74\x1e\x2e\x9f\xdd\xdb\x3b\x10\x16\xec\x82\x37\x86\x1d\xb7\x38\x65\x24\xd5\x7c\x1c\x52\x02\x06\xd5\x84\x0e\xb3\x0a\x2d\x0f\x11\x4d\x1f\x43\x39\x14\x9c\x5d\xc6\x85\x33\xd7\x32\x78\x4d\xf5\xf7\x42\x34\x1c\x67\xb9\x7e\x02\xd4\x42\x38\xee\x70\x3d\xca\xf6\xab\x3c\xfd\x5a\x19\x47\x56\x32\xea\x10\x4a\x8f\x44\x37\x5c\xcc\x3d\xdd\x50\x32\x57\xf5\xac\xac\x7f\xba\xfe\x70\xb6\x3c\xad\x4d\x4d\xf3\x1b\x8a\x16\x66\xe6\x0e\x9e\xdd\xe6\x13\x88\x43\x5c\xed\x60\xa1\x89\x58\xed\xd5\xab\xba\xc9\x56\x39\x5f\x1a\x6b\x2e\x41\xe1\x83\xdc\x75\x35\x50\x2c\xf6\x4a\xbb\xce\xd6\x48\xda\x89\xec\x9d\x8d\x42\x91\xf5\xbe\x56\xa0\x0f\xb9\xb6\x1b\x4b\xdc\xc7\xf3\x78\xa2\x16\x99\xa7\xe7\xfd\x18\x63\x8d\x6c\x66\xd1\xa7\x28\x37\x2f\x67\xf9\x73\xe3\x7c\x15\x1e\xba\xa7\xc5\x71\x3c\xa4\x84\xbe\x94\x07\xfd\x13\x00\x00\xff\xff\x62\x43\x20\x85\xf9\x03\x00\x00")

func appViewsHome_indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_appViewsHome_indexTmpl,
		"app/views/home_index.tmpl",
	)
}

func appViewsHome_indexTmpl() (*asset, error) {
	bytes, err := appViewsHome_indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/views/home_index.tmpl", size: 1017, mode: os.FileMode(420), modTime: time.Unix(1461574384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appViewsProduct_showTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x5b\x6f\xdb\xb6\x17\x7f\xef\xa7\x38\x7f\xb5\xf8\x63\x43\x2b\x7b\x4d\xef\x81\x6c\xc0\xb3\x9d\xc6\x40\x53\x7b\xb6\xbb\x62\x7b\x31\x68\x89\xb6\x88\x52\xa2\x46\x52\x71\xdd\x20\xdf\x7d\x87\x92\x25\xcb\x12\xed\x36\xe9\x06\x0c\xc3\x92\x07\x99\xe4\xb9\xf1\xc7\x73\xbd\xb9\xd9\x30\x1d\x42\x6b\x4a\x55\xca\x35\xdc\xde\x3e\x00\xf0\x02\x76\x0d\x3e\x27\x4a\x75\x1c\x5f\xc4\x9a\xb0\x98\x4a\xa7\x8b\x27\x00\x05\x7d\x5f\x70\x21\x7f\x25\x92\x11\xcd\x44\x9c\xf3\x99\xbf\x2a\x6f\x22\x45\x90\xfa\x5a\x2d\x16\x01\x45\x21\x5c\xed\x64\xd4\xe9\xa4\xd8\x54\x4e\xea\xfa\x79\x1a\xc5\x90\x7f\xdc\xd7\xb0\x97\xb9\x26\x9c\x53\xb9\x45\xce\x0a\xeb\x21\xb3\xda\xb0\x84\x4a\xb7\xbc\x43\x93\xdb\x75\xb5\x48\x0e\x94\x67\x32\x52\x5e\x8a\xe0\x2c\xa0\xaa\x41\x61\x80\x90\x24\x5e\x53\x78\xc4\x22\x82\x9f\xf3\x0e\xb4\x46\xe6\x97\x2a\xa1\x38\x90\xc8\x19\x28\xbd\xe5\xb4\xe3\x2c\x89\xff\x69\x2d\x45\x1a\x07\x6e\xc6\x7a\x9e\x4a\xfe\xc3\xcd\x4d\x2e\x27\x97\x71\x7b\xfb\xa3\xd3\xf5\xda\x9c\xd9\xd4\xd2\x38\x68\xa8\xf0\xda\x29\x3f\xa4\xf5\xda\x88\xc3\xf7\x42\x13\xa6\xd1\xb2\x79\xf7\x7f\x0f\x3a\xa7\xe0\x3a\xee\x84\xcf\x2b\x58\x45\xe8\xd8\xb5\xeb\x7b\xe1\xd3\xee\xcd\x4d\x6b\x92\xd3\xb4\xde\x93\x08\x2d\xf6\xda\xb8\x7b\x48\x96\x34\xc3\xc4\x48\x73\xdd\x44\x32\x9f\x3a\xdd\x47\x15\x21\x13\xb3\x65\xa4\x24\x35\x21\xf5\x8b\x65\x58\x36\x71\xf1\x94\x96\x22\x5e\x77\xfb\xe3\x77\xe3\xe9\xb9\xd7\xde\x2d\x2d\x74\x09\x89\x8d\xf5\x59\x78\x97\xb6\x67\xbb\x4d\x62\x6b\xa8\xe7\x77\xf0\x0d\xbf\xc5\x2f\x76\x2a\x4a\xff\xa1\x9c\xfa\x9a\x06\x4e\xf3\xf9\xcf\xe1\xe1\xc5\xcb\xd7\xcf\x9f\xf6\xcd\x5b\xdb\x0d\x28\x84\xd9\x78\xcf\x5e\xf4\x5e\x0c\x2e\xee\xc7\xfb\xfa\xa7\x41\xef\x55\xef\x7e\xbc\x17\x17\x83\x67\x67\x67\xf7\xe3\x7d\xf5\xea\xcd\xcb\x37\xc3\x7b\xde\xf7\xc2\xfc\x1f\xe7\x6d\x78\x7c\xbe\x69\x9c\xe5\x2e\x0e\x34\x1b\xfd\x3e\x3c\xe9\x3f\xd9\x83\x16\xcf\xeb\x40\x8c\x1e\xd4\x71\x02\x11\x61\x92\xb1\xe5\x89\x7d\xa6\x68\xcd\xd8\x17\x5a\x16\x14\x7b\x9e\x40\x05\x22\xc9\xea\xcd\x35\xe1\x29\x0a\x46\x4f\x35\x6c\xad\xd1\xe0\xf6\xd6\xe9\x16\xab\xc2\x6d\x73\x5a\xbb\x52\x5b\x9e\x30\x80\xe4\x17\xb0\xdc\x8c\x40\x28\xe9\xaa\xe3\x3c\x74\xba\x46\x09\xbc\x4d\x31\xf5\x79\x6d\xf2\xfd\x98\xfe\x32\xff\xed\x14\xa4\x27\xa2\xec\x0f\xbd\xb5\xc7\xd8\xde\xd8\xb2\xc6\x52\xe4\xc4\xac\xe2\x5a\x4c\x3e\xc2\x42\x82\xc0\xe9\x3e\x3e\x46\xcf\xe2\x24\xd5\xa0\xb7\x09\x3e\x83\xa6\x9f\x75\xc9\x66\x8c\x82\xf6\x9d\x3c\xf0\x5b\xc0\x5a\xa6\x5a\xe3\xc3\xe7\x0a\x55\xba\x8c\xd8\x5e\xe5\xee\x2c\xff\x2c\x16\x98\x40\x23\x62\x3a\x83\xc7\xd0\x1b\x0c\x60\x3e\x86\x7e\x6f\x3a\xf7\xda\xf9\xf9\xd7\x4d\xb0\xd4\x8b\x53\x5d\x8d\xeb\xaa\x90\x48\xda\xac\x93\x15\x97\xf1\x58\xb4\x06\x25\xfd\x8e\xd3\xce\x2a\x99\x6a\x33\x2c\xbd\xee\x8a\x5c\xb7\x92\x78\xed\x40\x48\xd9\x3a\xd4\x1d\xe7\xec\x79\xf2\xd9\xa0\xb7\xcb\xc4\x68\xfa\xc7\xd1\xec\xf2\xdd\x68\x36\xdf\x05\xb6\xcd\xe3\x2c\xb8\x16\xa9\x7c\x76\xd9\x9b\x66\x01\x6b\x4f\x0a\x27\x2d\x5c\x11\x9f\x2e\x85\xf8\xe4\xae\x25\xdd\xda\xcd\xb4\x3a\xc7\x69\xa9\x1a\xfb\x47\x8d\x9d\xc7\x9d\x84\x5a\x7c\xe7\x58\x09\xaf\x2d\x8f\x35\x9c\x95\x1a\xce\xe2\x95\x70\xbe\xb5\xf6\x37\x8a\xfd\xcb\xee\x60\x38\xeb\x4f\x47\x93\xf9\x68\xfc\x1e\x91\xc6\x8d\x5a\x9d\xaf\x76\x03\x03\xaa\x7c\xc9\xb2\xbc\xd4\x28\xe7\x77\xea\x41\x2c\x76\xcc\x26\xc3\xfe\xcc\x66\x81\x2d\xee\x38\x59\x52\xde\xbd\x22\x01\x05\x16\x23\x53\xbe\xae\x53\x1d\xd8\x6e\x88\xfb\x58\x6e\xb4\xdc\xda\x5a\x11\xcb\x13\x9d\x52\x8c\x3e\xc0\x08\x57\x27\x54\x4f\xd3\xe5\x12\x1b\x53\x25\x38\x55\x4f\x60\x45\x96\xd8\x04\x41\x9a\x60\xdb\x8a\xcb\x04\x51\xd1\xb8\xfe\x3f\x98\x54\xc8\xe1\x0b\x33\x07\x5f\xb7\xea\xbb\x40\x3e\x7e\x9f\x0b\x49\x22\xa6\x34\x39\x05\xe5\x15\x85\x18\xb3\x54\x42\x68\xcc\x34\xd5\x10\xa7\x1c\xd5\xc0\x8a\xe2\x45\xae\x99\x90\x34\x02\xfa\xd9\x17\x6b\xa6\xd1\x16\x0a\x24\x80\x50\xf8\x2d\x18\x6a\x46\x22\x08\x51\xe8\x92\x29\x50\x48\x15\x30\x9f\xc4\x3a\x95\x80\x11\x15\x13\x88\x04\xe7\x78\x42\x53\xa6\x22\x11\xb4\xbe\x19\x03\xeb\xb2\xb2\x28\x8a\xe4\x83\x1c\x2d\xef\x7f\xae\x8b\xc6\x12\x54\x4c\x83\x22\x7c\x60\xc3\x82\x35\xde\xc5\x75\x73\x9e\xe3\x51\x56\x70\x96\x98\x7a\xe1\xb3\xee\x74\xd8\x1f\x5f\x5d\x0d\xdf\x0f\x7a\x26\x7a\x66\xe8\xbb\xcf\xca\xe3\xa4\xbb\x73\x3c\x05\x5b\x91\x42\x64\x92\x04\xa0\xc7\x08\xe0\xec\x13\x85\x25\x51\x68\x06\xe2\x29\x74\x58\x19\x5f\x32\xda\x6b\x46\x37\x34\xa8\x00\x61\xcf\xdf\x85\x49\x98\xc0\xcd\x1c\x23\x1d\x60\x41\xc7\x29\x77\x77\x84\xd5\xa1\x75\x3f\xf9\xec\xa5\x20\xf6\x1a\x2c\x83\x50\x39\x02\x15\x50\xe1\x10\x24\x29\x47\xc7\x0f\x16\xa5\xb5\xb5\x39\xba\xd6\x92\x58\x2a\x61\x99\x5c\x31\x30\x07\x74\x45\x70\x68\x9f\x10\x1d\x62\xfb\x63\xb7\xcc\xc5\x31\x6a\x5d\xcd\xc3\xc8\x77\x85\xcd\x58\x36\x49\x7d\x90\xdc\x30\xda\x53\x2e\x39\x26\x50\x33\xcd\xa9\x73\xcc\x0c\x93\x31\x8a\x06\xac\x29\xd4\x32\xf4\xe4\x42\xf3\xa1\xe7\xa8\xd0\x83\xa9\x01\xa3\x27\x5a\x1c\x4c\x49\xbb\xe9\x68\x57\x21\x1b\xfe\x7f\x08\x63\xbd\xf9\xab\x96\xfb\x8a\xfb\x57\x7f\x1a\xd7\xa7\xa6\xcf\x3e\xe5\xff\x7f\x5b\x94\x7c\xbc\xec\xcd\x61\x3c\xbf\x1c\x4e\x61\x32\x1c\x4f\xde\x0d\xe1\xe7\xf1\x87\xb7\x97\xf3\x7a\xb8\x50\x91\x70\x0a\x9b\x50\xc0\x52\xa4\x26\x5a\x74\x88\x79\xa1\x10\xfe\x24\x0f\x9e\xf2\x88\xc2\x0a\x13\x87\xd8\xb0\x78\x5d\xd2\xdc\x33\x64\x8c\x60\x37\x17\xfc\x57\x46\x4b\x16\xd9\x0b\x23\x7c\xb1\xb3\xfa\xbf\x70\xf9\xa7\x87\xcb\x1d\xe2\xa5\xe4\x29\x34\xfc\x19\x00\x00\xff\xff\xb4\xa5\x08\x5d\x8c\x14\x00\x00")

func appViewsProduct_showTmplBytes() ([]byte, error) {
	return bindataRead(
		_appViewsProduct_showTmpl,
		"app/views/product_show.tmpl",
	)
}

func appViewsProduct_showTmpl() (*asset, error) {
	bytes, err := appViewsProduct_showTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/views/product_show.tmpl", size: 5260, mode: os.FileMode(420), modTime: time.Unix(1461810935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app/views/home_index.tmpl":   appViewsHome_indexTmpl,
	"app/views/product_show.tmpl": appViewsProduct_showTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"app": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"home_index.tmpl":   &bintree{appViewsHome_indexTmpl, map[string]*bintree{}},
			"product_show.tmpl": &bintree{appViewsProduct_showTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
